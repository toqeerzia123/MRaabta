@{
Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
<style>
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>
}

<div id="root">
</div>

@section scripts{
<script src="~/Scripts/dexie.js"></script>
<script>
    const origin = @Html.Raw(Json.Encode(ViewBag.Origin));
    const Routes =  @Html.Raw(Json.Encode(ViewBag.Routes));
    const TransportType =  @Html.Raw(Json.Encode(ViewBag.TransportType));
    const VehicleType =  @Html.Raw(Json.Encode(ViewBag.VehicleType));
    const Vehicles =  @Html.Raw(Json.Encode(ViewBag.Vehicles));
    const cnlength =  @Html.Raw(Json.Encode(ViewBag.CNLengths));
    const branches =  @Html.Raw(Json.Encode(ViewBag.Branches));
    const loadingData =  @Html.Raw(Json.Encode(ViewBag.LoadingData));
    const fetchTouchpointsUrl = '@Url.Action("GetTouchpointsAndDestinations","Loading")';
    const fetchBagUrl = '@Url.Action("GetBagInfo","Loading")';
    const fetchCNUrl = '@Url.Action("GetCNInfo","Loading")';
    const postUrl = '@Url.Action("PostLoading","Loading")';
    const searchLoadingUrl = '@Url.Action("SearchLoading", "Loading")';
    const printLoadingUrl = '@Url.Action("PrintLoading", "Loading")';
    const runnerRouteUrl = '@Url.Action("GetRunnerRoutes", "Loading")';
    const loadingId = @ViewBag.LoadingId;
</script>
<script type="text/babel">

    var db = new Dexie("LoadingDB");

    db.version(2).stores({
        loading: "BagCN,OriginId,OriginName,DestinationId,DestinationName,SealNoPieces,Weight,Remarks,IsBag,ServiceType,ConsignmentTypeId,Destination,VehicleNo,SortOrder,[Destination+VehicleNo]"
    });

    async function AddLoading(obj) {
        if (loadingData.id == 0)
            await db.loading.add(obj);
    }

    async function UpdateLoading(obj) {
        if (loadingData.id == 0)
            await db.loading.update(obj.BagCN, obj);
    }

    async function DeleteLoading(pk) {
        if (loadingData.id == 0)
            await db.loading.where('BagCN').equals(pk).delete();
    }

    async function ClearLoading(destination, vehicleNo) {
        //await db.loading.clear();
        await db.loading.where('[Destination+VehicleNo]').equals([destination, vehicleNo]).delete();
    }

    async function CounLoading() {
        return await db.loading.count();
    }

    async function GetLoadings(destination, vehicleNo) {
        //var rs = await db.loading.where('[Destination+VehicleNo]').equals([destination, vehicleNo]).orderBy('SortOrder').reverse().toArray();
        var rs = await db.loading.where('[Destination+VehicleNo]').equals([destination, vehicleNo]).toArray();
        return rs;
    }


    function compareValues(key, order = 'asc') {
        return function innerSort(a, b) {
            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                // property doesn't exist on either object
                return 0;
            }

            const varA = (typeof a[key] === 'string')
                ? a[key].toUpperCase() : a[key];
            const varB = (typeof b[key] === 'string')
                ? b[key].toUpperCase() : b[key];

            let comparison = 0;
            if (varA > varB) {
                comparison = 1;
            } else if (varA < varB) {
                comparison = -1;
            }
            return (
                (order === 'desc') ? (comparison * -1) : comparison
            );
        };
    }

    const Context = React.createContext(null);

    function MainForm() {
        const {
            mainData,
            setMainData,
            loading,
            setLoading,
            touchpoints,
            setTouchpoints,
            destination,
            setDestination,
            runnerRoutes,
            setRunnerRoutes
        } = React.useContext(Context);

        const [rented, setRented] = React.useState(false);
        const [bag, setBag] = React.useState(true);
        const cnRef = React.useRef(null);
        const destRef = React.useRef(null);
        const [scanned, setScanned] = React.useState(false);



        React.useEffect(() => {
            let x = { ...mainData };

            if (touchpoints.length > 0) {
                x.Touchpoint = touchpoints[0].Value;

            }

            if (destination.length > 0) {
                x.Destination = destination[0].Value;

            }

            setMainData(x);
        }, [touchpoints, destination]);


        React.useEffect(() => {
            if (mainData.RouteId)
                fetchRunnerRoutes(mainData.RouteId);
        }, [mainData.RouteId]);


        const styles = {
            mainDiv: {
                width: '100%',
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit,minmax(200px,1fr))',
                gridAutoRows: '100px',
                columnGap: '5px',
                gridRowGap: '5px',
            }
        }

        const fetchTouchpoints = (routeId) => {
            const url = `${fetchTouchpointsUrl}?routeId=${routeId}`
            fetch(url)
                .then(
                    function (response) {
                        if (response.status !== 200) {
                            console.log('Looks like there was a problem. Status Code: ' +
                                response.status);
                            return;
                        }

                        // Examine the text in the response
                        response.json().then(function (data) {
                            setTouchpoints(data.tp);
                            setDestination(data.dest);
                        });
                    }
                )
                .catch(function (err) {
                    console.log('Fetch Error :-S', err);
                });
        }

        const fetchRunnerRoutes = (routeId) => {
            const url = `${runnerRouteUrl}?routeId=${routeId}`
            fetch(url)
                .then(
                    function (response) {
                        if (response.status !== 200) {
                            console.log('Looks like there was a problem. Status Code: ' +
                                response.status);
                            return;
                        }

                        // Examine the text in the response
                        response.json().then(function (rs) {
                            if (rs.sts == 0) {
                                setRunnerRoutes(rs.data);
                            } else {
                                alert(rs.msg);
                                setRunnerRoutes([]);
                            }
                        });
                    }
                )
                .catch(function (err) {
                    console.log('Fetch Error :-S', err);
                });
        }

        const onRouteChanged = (e) => {
            const id = e.target.value;
            if (id) {
                updateMainData('RouteId', e);
                fetchTouchpoints(id);
            }
        }

        const vehicleModeChanged = (e) => {
            updateMainData('IsRented', e);
        }

        const onScanTypeChanged = (e) => {
            const val = e.target.value;
            if (val == 1)
                setBag(true)
            else
                setBag(false)
        }

        const process = (e) => {
            let value = e.target.value;
            let numbers = value.replace(/[^0-9]/g, "");
            e.target.value = numbers;
        }

        const processAlpha = (e) => {
            let value = e.target.value;
            let numbers = value.replace(/[^0-9a-zA-Z]/g, "");
            e.target.value = numbers;
        }

        const processAlphaWithDash = (e) => {
            let value = e.target.value;
            let numbers = value.replace(/[^0-9a-zA-Z-]/g, "");
            e.target.value = numbers;
        }

        const clearCNBag = (el) => {
            cnRef.current.value = '';
            cnRef.current.focus();
            setScanned(true);
        }

        const validateCN = (val) => {
            let prefixFound = false;
            let lengthFound = false;

            if (val[0] == 5 && val.length != 15) {
                alert('Invalid Length of COD Consignment');
                cnRef.current.value = '';
                cnRef.current.focus();
                setScanned(false);
                return;
            }


            for (let x of cnlength) {
                let prefix = val.substring(0, x.PrefixLength);
                if (prefix == x.Prefix) {
                    prefixFound = true;
                    if (val.length == x.Length) {
                        lengthFound = true;
                        break;
                    }
                }
            }

            if (prefixFound) {
                if (lengthFound) {
                    fetchCNInfo(val);
                } else {
                    alert('Invalid Length');
                    cnRef.current.value = '';
                    cnRef.current.focus();
                    setScanned(false);
                }
            } else {
                alert('Prefix not found');
                cnRef.current.value = '';
                cnRef.current.focus();
                setScanned(false);
            }
        }

        const fetchCNInfo = (cn) => {
            if (!mainData.GridData.some((x) => x.BagCN == cn)) {
                const url = `${fetchCNUrl}?cn=${cn}`
                fetch(url)
                    .then(
                        function (response) {
                            if (response.status !== 200) {
                                console.log('Looks like there was a problem. Status Code: ' + response.status);
                                cnRef.current.value = '';
                                cnRef.current.focus();
                                setScanned(false);
                                return;
                            }

                            response.json().then(async function (rs) {
                                console.log(rs);
                                if (rs.type == 0) {
                                    let obj = Object.assign({}, mainData);
                                    let z = null;
                                    if (rs.CN) {
                                        z = {
                                            BagCN: rs.CN,
                                            OriginId: rs.OriginId,
                                            OriginName: rs.Origin,
                                            DestinationId: rs.DestinationId,
                                            DestinationName: rs.Destination,
                                            SealNoPieces: rs.Pieces,
                                            Weight: parseFloat(rs.Weight),
                                            Remarks: '',
                                            IsBag: bag,
                                            ServiceType: rs.ServiceType,
                                            ConsignmentTypeId: rs.ConsignmentTypeId,
                                            SortOrder: mainData.GridData.length + 1,
                                            Destination: mainData.Destination,
                                            VehicleNo: mainData.IsRented ? mainData.VehicleRegNo : mainData.VehicleId
                                        };
                                    } else {
                                        const destid = destRef.current.value;
                                        const destname = destRef.current.options[destRef.current.selectedIndex].text;
                                        z = {
                                            BagCN: cn,
                                            OriginId: parseInt(origin.Value),
                                            OriginName: origin.Text,
                                            DestinationId: parseInt(destid),
                                            DestinationName: destname,
                                            SealNoPieces: 1,
                                            Weight: 0.5,
                                            Remarks: '',
                                            IsBag: bag,
                                            ServiceType: null,
                                            ConsignmentTypeId: 12,
                                            SortOrder: mainData.GridData.length + 1,
                                            Destination: mainData.Destination,
                                            VehicleNo: mainData.IsRented ? mainData.VehicleRegNo : mainData.VehicleId
                                        };
                                    }

                                    obj.GridData.unshift(z);
                                    setMainData(obj);

                                    await AddLoading(z);
                                    cnRef.current.value = '';
                                    cnRef.current.focus();
                                    setScanned(false);
                                } else {
                                    cnRef.current.value = '';
                                    cnRef.current.focus();
                                    setScanned(false);
                                    alert(rs.msg);
                                }
                            });
                        }
                    ).catch(function (err) {
                        console.log('Fetch Error :-S', err);
                        cnRef.current.value = '';
                        cnRef.current.focus();
                        setScanned(false);
                    });
            } else {
                alert('Bag/Consigment Already Exists');
                cnRef.current.value = '';
                cnRef.current.focus();
                setScanned(false);
            }
        }

        const fetchBagInfo = (bagno) => {
            if (!mainData.GridData.some((x) => x.BagCN == bagno)) {
                const url = `${fetchBagUrl}?bagno=${bagno}`
                fetch(url)
                    .then(
                        function (response) {
                            if (response.status !== 200) {
                                console.log('Looks like there was a problem. Status Code: ' +
                                    response.status);
                                cnRef.current.value = '';
                                cnRef.current.focus();
                                setScanned(false);
                                return;
                            }

                            response.json().then(async function (rs) {
                                console.log(rs);
                                if (rs.type == 0) {
                                    let obj = Object.assign({}, mainData);
                                    let z = {
                                        BagCN: rs.data.Bag,
                                        OriginId: rs.data.OriginId,
                                        OriginName: rs.data.OriginName,
                                        DestinationId: rs.data.DestinationId,
                                        DestinationName: rs.data.DestinationName,
                                        SealNoPieces: rs.data.SealNo,
                                        Weight: rs.data.Weight,
                                        Remarks: '',
                                        IsBag: bag,
                                        ServiceType: null,
                                        ConsignmentTypeId: 0,
                                        SortOrder: mainData.GridData.length + 1,
                                        Destination: mainData.Destination,
                                        VehicleNo: mainData.IsRented ? mainData.VehicleRegNo : mainData.VehicleId
                                    };

                                    obj.GridData.unshift(z);

                                    setMainData(obj);

                                    await AddLoading(z);
                                    cnRef.current.value = '';
                                    cnRef.current.focus();
                                    setScanned(false);
                                } else {
                                    cnRef.current.value = '';
                                    cnRef.current.focus();
                                    setScanned(false);
                                    alert(rs.msg);
                                }
                            });
                        }
                    )
                    .catch(function (err) {
                        console.log('Fetch Error :-S', err);
                        cnRef.current.value = '';
                        cnRef.current.focus();
                        setScanned(false);
                    });
            } else {
                alert('Bag/Consigment Already Exists');
                cnRef.current.value = '';
                cnRef.current.focus();
                setScanned(false);
            }
        }

        const formValidation = () => {

            if (!mainData.RouteId) {
                alert('Select Route');
                return false;
            }

            if (!mainData.Touchpoint) {
                alert('Select Touchpoint');
                return false;
            }

            if (!mainData.Destination) {
                alert('Select Destination');
                return false;
            }

            if (!mainData.TransportType) {
                alert('Select Transport Type');
                return false;
            }

            if (!mainData.VehicleType) {
                alert('Select Vehicle Type');
                return false;
            }

            if ((mainData.IsRented == false || mainData.IsRented == 'false') && !mainData.VehicleId) {
                alert('Select Vehicle');
                return false;
            }

            if ((mainData.IsRented == true || mainData.IsRented == 'true') && !mainData.VehicleRegNo) {
                alert('Enter Vehicle RegNo');
                return false;
            }

            if (!mainData.CourierName) {
                alert('Enter Courier Name');
                return false;
            }

            // if (!mainData.LoadingSealNo) {
            //     alert('Enter Loading Seal No');
            //     return false;
            // }

            return true;
        }

        const keypressHandler = e => {
            if (e.key === "Enter") {
                cnRef.current.blur();
            }
        };

        const changeBagCN = (e) => {
            setScanned(true);
            if (e.target.value.length > 0) {
                if (!formValidation()) {
                    cnRef.current.value = '';
                    cnRef.current.focus();
                    setScanned(false);
                    return;
                }

                if (bag)
                    fetchBagInfo(e.target.value);
                else
                    validateCN(e.target.value);
            } else {
                setScanned(false);
            }
        }

        const updateMainData = (key, e) => {
            var val = e.target.value;
            if (key == 'IsRented') {
                val = (val == 'true');
            }
            let obj = Object.assign({}, mainData);
            obj[key] = val;
            setMainData(obj);
        }

        const clearMainData = () => {
            let data = {
                RouteId: '',
                Touchpoint: '',
                Destination: '',
                TransportType: '27',
                VehicleType: '',
                VehicleId: '',
                IsRented: 'false',
                VehicleRegNo: '',
                Description: '',
                CourierName: '',
                LoadingSealNo: '',
                GridData: []
            }
            setMainData(data);
        }

        const postLoading = async () => {
            try {
                setLoading(true);
                const response = await fetch(postUrl, {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ model: mainData })
                });
                setLoading(false);
                if (response.status === 200) {
                    const rs = await response.json();
                    alert(rs.msg);
                    if (rs.sts == 0) {
                        await ClearLoading(mainData.Destination, mainData.IsRented ? mainData.VehicleRegNo : mainData.VehicleId);
                        clearMainData();
                        window.open(`${printLoadingUrl}?id=${rs.id}`, '_blank');
                    }
                } else {
                    console.log('Looks like there was a problem. Status Code: ' + response.status);

                }
            } catch (err) {
                setLoading(false);
                console.log('Fetch Error :-S', err);
            }
        }

        const saveLoading = async () => {
            if (formValidation()) {
                if (mainData.GridData.length > 0) {
                    await postLoading();
                } else {
                    alert('Insert Details');
                }
            }
        }

        React.useEffect(() => {
            if (mainData.Destination && mainData.VehicleId) {
                if (loadingData.id == 0)
                    confirmRestore(mainData.Destination, mainData.VehicleId);
            }
        }, [mainData.Destination, mainData.VehicleId]);

        const onVehicleRegNoBlur = (e) => {
            const val = e.target.value;
            if (mainData.Destination && val) {
                if (loadingData.id == 0)
                    confirmRestore(mainData.Destination, val);
            }
        }


        const confirmRestore = async (destination, vehicleNo) => {
            const data = await GetLoadings(destination, vehicleNo);
            if (data.length > 0) {
                if (confirm("Unsaved data found want to save? If cancel data will be removed.")) {
                    const z = data.sort(compareValues('SortOrder', 'desc'))
                    var obj = { ...mainData, GridData: z };
                    setMainData(obj);
                } else {
                    await ClearLoading(destination, vehicleNo);
                }
            }
        };

        return (
            <div style={styles.mainDiv}>
                <div>
                    <label>Route</label><br />
                    <select className="form-control" onChange={onRouteChanged} value={mainData.RouteId} disabled={loadingData.id > 0}>
                        <option value="">Select Route</option>
                        {
                            Routes.map((x, index) =>
                                <option key={index} value={x.Value}>{x.Text}</option>)
                        }
                    </select>
                </div>
                <div>
                    <label>Touchpoints</label><br />
                    <select className="form-control" value={mainData.Touchpoint} disabled={loadingData.id > 0} onChange={(e) =>
                        updateMainData('Touchpoint', e)}>
                        <option value="">Select Touchpoint</option>
                        {
                            touchpoints.map((x, index) =>
                                <option key={index} value={x.Value}>{x.Text}</option>)
                        }
                    </select>
                </div>
                <div>
                    <label>Destination</label><br />
                    <select className="form-control" ref={destRef} value={mainData.Destination} disabled={loadingData.id > 0} onChange={(e) =>
                        updateMainData('Destination', e)}>
                        <option value="">Select Destination</option>
                        {
                            destination.map((x, index) =>
                                <option key={index} value={x.Value}>{x.Text}</option>)
                        }
                    </select>
                </div>
                <div>
                    <label>Transport Type</label><br />
                    <select className="form-control" value={mainData.TransportType} disabled={loadingData.id > 0} onChange={(e) =>
                        updateMainData('TransportType', e)}>
                        <option value="">Select Transport Type</option>
                        {
                            TransportType.map((x, index) =>
                                <option key={index} value={x.Value}>{x.Text}</option>)
                        }
                    </select>
                </div>
                <div>
                    <label>Vehicle Type</label><br />
                    <select className="form-control" value={mainData.VehicleType} disabled={loadingData.id > 0} onChange={(e) =>
                        updateMainData('VehicleType', e)}>
                        <option value="">Select Vehicle Type</option>
                        {
                            VehicleType.map((x, index) =>
                                <option key={index} value={x.Value}>{x.Text}</option>)
                        }
                    </select>
                </div>
                <div>
                    <label>Vehicle Mode</label><br />
                    <div style={{ marginTop: '10px' }}>
                        <div className="form-check form-check-inline">
                            <input className="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" disabled={loadingData.id > 0} checked={!mainData.IsRented} value="false" onChange={(e) => updateMainData('IsRented', e)} />
                            <label className="form-check-label" htmlFor="inlineRadio1">Vehicle</label>
                        </div>
                        <div className="form-check form-check-inline">
                            <input className="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" disabled={loadingData.id > 0} checked={mainData.IsRented} value="true" onChange={(e) => updateMainData('IsRented', e)} />
                            <label className="form-check-label" htmlFor="inlineRadio2">Rented</label>
                        </div>
                    </div>
                </div>
                {
                    mainData.IsRented == 'false' || !mainData.IsRented ?
                        <div>
                            <label>Vehicles</label><br />
                            <select className="form-control" value={mainData.VehicleId} disabled={loadingData.id > 0} onChange={(e) =>
                                updateMainData('VehicleId', e)}>
                                <option value="">Select Vehicles</option>
                                {
                                    Vehicles.map((x, index) =>
                                        <option key={index} value={x.Value}>{x.Text}</option>)
                                }
                            </select>
                        </div>
                        : <div>
                            <label>Vehicle Reg No:</label><br />
                            <input type="text" className="form-control" value={mainData.VehicleRegNo} onBlur={onVehicleRegNoBlur} readOnly={loadingData.id > 0} onChange={(e) => updateMainData('VehicleRegNo', e)} />
                        </div>
                }
                <div>
                    <label>Description</label><br />
                    <input type="text" className="form-control" value={mainData.Description} readOnly={loadingData.id > 0} onChange={(e) => updateMainData('Description', e)} />
                </div>
                <div>
                    <label>Courier Name</label><br />
                    <input type="text" className="form-control" value={mainData.CourierName} readOnly={loadingData.id > 0} onChange={(e) => updateMainData('CourierName', e)} />
                </div>
                <div>
                    <label>Loading Seal No</label><br />
                    <input type="text" className="form-control" value={mainData.LoadingSealNo} readOnly={loadingData.id > 0} onInput={processAlphaWithDash} onChange={(e) => updateMainData('LoadingSealNo', e)} />
                </div>
                <div>
                    <label>Total Weight</label><br />
                    <input type="text" className="form-control" readOnly value={
                        mainData.GridData.reduce((sum, o) => {
                            return sum + o.Weight
                        }, 0)
                    } />
                </div>
                <div>
                    <label>Scan Type</label><br />
                    <div style={{ marginTop: '10px' }} onChange={onScanTypeChanged}>
                        <div className="form-check form-check-inline">
                            <input className="form-check-input" type="radio" name="inlineRadioOptions2" id="inlineRadio3" defaultChecked={true} value="1" />
                            <label className="form-check-label" htmlFor="inlineRadio3">Bag</label>
                        </div>
                        <div className="form-check form-check-inline">
                            <input className="form-check-input" type="radio" name="inlineRadioOptions2" id="inlineRadio4" value="2" />
                            <label className="form-check-label" htmlFor="inlineRadio4">Consignment</label>
                        </div>
                    </div>
                </div>
                <div>
                    <label>{bag ? 'Bag' : 'Consignment'}</label><br />
                    <input type="text" className="form-control" onInput={process} ref={cnRef} onKeyPress={keypressHandler} onBlur={changeBagCN} readOnly={scanned} />
                </div>
                <div>
                </div>
                <div style={{ justifySelf: "end", alignSelf: "center" }}>
                    <button className="btn btn-secondary" onClick={saveLoading}>Save</button>
                </div>
            </div>
        )
    }

    const GridData = () => {
        const { mainData, setMainData, runnerRoutes, setRunnerRoutes } = React.useContext(Context);

        const onRowWeightUpdate = async (e, index) => {
            const val = e.target.value == '' ? 0 : +e.target.value;
            let obj = Object.assign({}, mainData);
            obj.GridData[index]['Weight'] = val <= 99999 ? val : 0;
            setMainData(obj);
            await UpdateLoading(obj.GridData[index]);
        }

        const onRowPiecesUpdate = async (e, index) => {
            const val = e.target.value == '' ? 0 : e.target.value;
            let obj = Object.assign({}, mainData);
            obj.GridData[index]['SealNoPieces'] = parseInt(val);
            setMainData(obj);
            await UpdateLoading(obj.GridData[index]);
        }

        const onRowRemarksUpdate = async (e, index) => {
            const val = e.target.value;
            let obj = Object.assign({}, mainData);
            obj.GridData[index]['Remarks'] = val;
            setMainData(obj);
            await UpdateLoading(obj.GridData[index]);
        }

        const onRowDestinationUpdate = async (index, val) => {
            let obj = Object.assign({}, mainData);
            obj.GridData[index]['DestinationId'] = val;
            obj.GridData[index]['DestinationName'] = branches.filter((x) => x.Value == val)[0].Text;
            setMainData(obj);
            await UpdateLoading(obj.GridData[index]);
        }

        const onRemove = async (index) => {
            let obj = Object.assign({}, mainData);
            const pk = obj.GridData[index].BagCN;
            obj.GridData.splice(index, 1);
            setMainData(obj);
            await DeleteLoading(pk);
        }

        return (
            <div className="mt-4" style={{ background: 'rgba(255,255,255,.5)', padding: '10px', borderRadius: '5px' }}>
                <div className="row">
                    <div className="col-12">
                        <div className="row">
                            <div className="col-4"></div>
                            <div className="col-4" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                <h3 className="text-center">Loading Details</h3>
                            </div>
                            <div className="col-4" style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>
                                <p className="text-center" style={{ fontWeight: '900' }}><b>Scanned Bag/Consignments: <span>{mainData.GridData.length}</span></b></p>
                            </div>
                        </div>
                        <div className="table-responsive">
                            <table className="table table-bordered mt-3">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Bag/Consignment</th>
                                        <th>Origin</th>
                                        <th>Destination</th>
                                        <th>Weight</th>
                                        <th>Seal#/Pieces</th>
                                        <th>Remarks</th>
                                        <th>Type</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {
                                        mainData.GridData.map((x, index) =>
                                            <tr key={index} style={!runnerRoutes.some((e) => e == x.DestinationId) ? { background: 'rgba(150, 0, 24,.8)', color: 'rgb(255,255,255,.8)' } : {}}>
                                                <td>{(index + 1)}</td>
                                                <td>{x.BagCN}</td>
                                                <td>{x.OriginName}</td>
                                                <td>
                                                    <select disabled={x.IsOld !== undefined && x.IsOld} className="form-control" value={x.DestinationId} onChange={(z) => onRowDestinationUpdate(index, z.target.value)}>
                                                        {
                                                            branches.map((z, index2) => <option key={index2} value={z.Value}>{z.Text}</option>)
                                                        }
                                                    </select>
                                                </td>
                                                <td><input readOnly={x.IsOld !== undefined && x.IsOld} className="form-control" type="number" step="any" value={x.Weight} onChange={(e) => onRowWeightUpdate(e, index)} /></td>
                                                <td>
                                                    {x.IsBag ? x.SealNoPieces :

                                                        <input readOnly={x.IsOld !== undefined && x.IsOld} className="form-control" type="number" value={x.SealNoPieces} onChange={(e) => onRowPiecesUpdate(e, index)} />
                                                    }
                                                </td>
                                                <td>
                                                    <textarea readOnly={x.IsOld !== undefined && x.IsOld} className="form-control" onChange={(e) => onRowRemarksUpdate(e, index)} value={x.Remarks}>
                                                    </textarea>
                                                </td>
                                                <td>{(x.IsBag ? 'Bag' : 'Consignment')}</td>
                                                <td>
                                                    <button disabled={x.IsOld !== undefined && x.IsOld} className="btn btn-danger btn-sm" onClick={(e) => onRemove(index)}>Remove</button>
                                                </td>
                                            </tr>
                                        )
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        )
    }

    function App() {
        const {
            loading,
            setLoading,
            mainData, setMainData,
            touchpoints,
            setTouchpoints,
            destination,
            setDestination
        } = React.useContext(Context);


        React.useEffect(() => {
            if (loadingData.id > 0) {
                var x = { ...mainData };
                x.RouteId = loadingData.loading.RouteId;
                x.Touchpoint = loadingData.loading.Touchpoint;
                x.Destination = loadingData.loading.Destination;
                x.TransportType = loadingData.loading.TransportType;
                x.VehicleType = loadingData.loading.VehicleType;
                x.VehicleId = loadingData.loading.VehicleId;
                x.IsRented = loadingData.loading.IsRented;
                x.VehicleRegNo = loadingData.loading.VehicleRegNo;
                x.Description = loadingData.loading.Description;
                x.CourierName = loadingData.loading.CourierName;
                x.LoadingSealNo = loadingData.loading.LoadingSealNo;
                x.GridData = loadingData.details;
                setMainData(x);
                setTouchpoints(loadingData.touchpoints);
                setDestination(loadingData.destinations);
            }
        }, [])

        // React.useEffect(() => {

        //     const confirmRestore = async () => {
        //         const c = await CounLoading();
        //         if (c > 0) {
        //             if (confirm("Unsaved data found want to save? If cancel data will be removed.")) {
        //                 const data = await GetLoadings();
        //                 var obj = { ...mainData, GridData: data };
        //                 setMainData(obj);
        //             } else {
        //                 await ClearLoading();
        //             }
        //         }
        //     };

        //     if (loadingData.id == 0) {
        //         confirmRestore();
        //     }

        //     return () => console.log('unmounting...');
        // }, []);

        const styles = {
            whiteBgStyle: {
                background: 'rgba(255,255,255,.5)', padding: '15px', borderRadius: '5px'
            },
            justifyAlignSelfCenter: {
                justifySelf: "center", alignSelf: "center"
            },
            justifyAlignSelfEnd: {
                justifySelf: "end", alignSelf: "center"
            },
            overlay: {
                position: 'fixed',
                top: '0',
                left: '0',
                zIndex: '1000',
                width: '100%',
                height: '100vh',
                background: 'rgba(0,0,0,.8)',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                color: 'white',
                backdropFilter: 'blur(15px)'
            }
        }

        return (

            <div style={{ position: 'relative' }}>
                {
                    loading ?
                        <div style={styles.overlay}>
                            <h2>Please Wait</h2>
                        </div> : ''
                }
                <div className="app-content">
                    <div style={styles.whiteBgStyle}>
                        <div style={{ display: 'grid', gridTemplateColumns: '25% auto 25%' }}>
                            <div></div>
                            <div style={styles.justifyAlignSelfCenter}>
                                <h2 style={styles.justifyAlignSelfCenter}>Loading</h2>
                            </div>
                            <div style={styles.justifyAlignSelfEnd}>
                                <a href={searchLoadingUrl} className="btn btn-sm btn-secondary" target="_blank">Search Loadings</a>
                            </div>
                        </div>
                        <MainForm />
                    </div>
                    <br />
                    <GridData />
                </div>
            </div>
        )
    }

    const Store = ({ children }) => {
        let data = {
            Id: loadingData.id,
            RouteId: '',
            Touchpoint: '',
            Destination: '',
            TransportType: '27',
            VehicleType: '',
            VehicleId: '',
            IsRented: false,
            VehicleRegNo: '',
            Description: '',
            CourierName: '',
            LoadingSealNo: '',
            GridData: []
        }

        const [loading, setLoading] = React.useState(false);
        const [mainData, setMainData] = React.useState(data);
        const [touchpoints, setTouchpoints] = React.useState([]);
        const [destination, setDestination] = React.useState([]);
        const [runnerRoutes, setRunnerRoutes] = React.useState([]);
        return (
            <Context.Provider value={{
                mainData,
                setMainData,
                loading,
                setLoading,
                touchpoints,
                setTouchpoints,
                destination,
                setDestination,
                runnerRoutes,
                setRunnerRoutes
            }}>
                {children}
            </Context.Provider>
        )
    }

    const Main = () => {
        return (
            <Store>
                <App />
            </Store>
        )
    }

    ReactDOM.render(
        <Main />,
        document.querySelector('#root')
    );
</script>
}