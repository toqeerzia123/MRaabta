@{
Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
<style>
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

    table {
        font-size: 12px;
    }
</style>
}

<main class="app-content">
    <div style="background:rgba(255,255,255,.5);padding:15px;border-radius:5px">
        <h2 class="text-center">Search Baggings</h2>
        <div id="root"></div>
    </div>
</main>


@section scripts{
<script>
    var date = '@DateTime.Now.ToString("yyyy-MM-dd")';
    var searchUrl = '@Url.Action("SearchBags","Bagging")';
    var printUrl = '@Url.Action("Print","Bagging")';
    var labelUrl = '@Url.Action("TagPrint","Bagging")';
    var editUrl = '@Url.Action("Index","Bagging")';
</script>
<script type="text/babel">

    function Grid(props) {

        return (
            <div style={{ overflowX: 'auto' }}>
                {
                    props.data.length == 0 ? '' :
                        <table className="table table-bordered">
                            <thead>
                                <tr>
                                    <th>S.No</th>
                                    <th>Edit</th>
                                    <th>Label</th>
                                    <th>Bag No</th>
                                    <th>Total Weight</th>
                                    <th>Origin</th>
                                    <th>Destination</th>
                                    <th>Seal No</th>
                                    <th>Created On</th>
                                </tr>
                            </thead>
                            <tbody>
                                {
                                    props.data.map((x, index) =>
                                        <tr key={index}>
                                            <td>{index + 1}</td>
                                            <td>{x.Edit ? <a target="_blank" href={editUrl + '?no=' + x.EncBagNo} className="btn btn-sm btn-secondary">Edit</a> : ''}</td>
                                            <td>{!x.Edit && <a target="_blank" href={labelUrl + '?bagno=' + x.BagNo} className="btn btn-sm btn-secondary">Print</a>}</td>
                                            <td><a target="_blank" href={printUrl + '?bagno=' + x.BagNo} style={{ color: 'blue', textDecoration: 'underline' }}>{x.BagNo}</a></td>
                                            <td>{x.TotalWeight} KG</td>
                                            <td>{x.Origin}</td>
                                            <td>{x.Destination}</td>
                                            <td>{x.SealNo}</td>
                                            <td>{x.CreatedOn}</td>
                                        </tr>
                                    )
                                }
                            </tbody>
                        </table>
                }
            </div>
        );
    }


    function App() {

        const [data, setData] = React.useState({
            date: date,
            no: '',
            isBag: true
        });

        const [gridData, setGridData] = React.useState([]);

        const [loading, setLoading] = React.useState(false);

        const updateData = (key, val) => {
            let x = { ...data };
            x[key] = val;
            setData(x);
        }

        const getBaggings = () => {
            setLoading(true);
            fetch(searchUrl, {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            }).then(
                function (response) {
                    setLoading(false);
                    if (response.status !== 200) {
                        console.log('Looks like there was a problem. Status Code: ' + response.status);
                        return;
                    }
                    response.json().then(function (rs) {
                        if (rs.sts == 0) {
                            if (rs.data.length > 0) {
                                setGridData(rs.data);
                            } else {
                                alert('No data found');
                            }
                        } else {
                            alert(rs.msg);
                        }
                    });
                }
            ).catch(function (err) {
                setLoading(false);
                console.log('Fetch Error :-S', err);
            });
        }

        const overlayStyle = {
            position: 'fixed',
            top: '0px',
            left: '0px',
            width: '100vw',
            height: '100vh',
            background: 'rgba(0,0,0,.8)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            color: 'rgba(255,255,255,.8)',
            zIndex: 10000,
            backdropFilter: 'blur(15px)'
        }

        return (
            <div style={{ position: 'relative' }}>
                {
                    loading ?
                        <div style={overlayStyle}>
                            <h2>Please Wait</h2>
                        </div> : ''
                }
                <div className="row">
                    <div className="col-lg-3 col-sm-12">
                        <label>Date</label>
                        <input type="date" className="form-control" value={data.date} onChange={(x) => updateData('date', x.target.value)} />
                    </div>
                    <div className="col-lg-2 col-sm-12">
                        <label>Type</label>
                        <div className="form-inline">
                            <div className="radio mt-2">
                                <label><input type="radio" name="optradio" checked={data.isBag} onChange={(x) => updateData('isBag', true)} /><span className="ml-1">Bag No</span></label>
                            </div>
                            <div className="ml-3 radio mt-2">
                                <label><input type="radio" name="optradio" checked={!data.isBag} onChange={(x) => updateData('isBag', false)} /><span className="ml-1">Seal No</span></label>
                            </div>
                        </div>
                    </div>
                    <div className="col-lg-3 col-sm-12">
                        <label>Enter Number</label>
                        <input type="text" className="form-control" value={data.no} onChange={(x) => updateData('no', x.target.value)} />
                    </div>
                    <div className="col-lg-1 col-sm-12">
                        <button type="button" className="btn btn-outline-secondary" style={{ marginTop: '1.5rem' }} onClick={getBaggings}>Search</button>
                    </div>
                </div>
                <br />
                {
                    gridData.length > 0 ? <Grid data={gridData} /> : ''
                }
            </div>
        );
    }
    ReactDOM.render(<App />, document.querySelector('#root'));
</script>
}